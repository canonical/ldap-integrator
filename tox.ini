# Copyright 2024 identity
# See LICENSE file for licensing details.

[tox]
no_package = True
skip_missing_interpreters = True
env_list = format, lint, static, unit
min_version = 4.0.0

[vars]
src_path = {tox_root}/src
tests_path = {tox_root}/tests
;lib_path = {tox_root}/lib/charms/operator_name_with_underscores
all_path = {[vars]src_path} {[vars]tests_path}

[testenv]
set_env =
    PYTHONPATH = {tox_root}/lib:{[vars]src_path}
    PYTHONBREAKPOINT=pdb.set_trace
    PY_COLORS=1
pass_env =
    PYTHONPATH
    CHARM_BUILD_DIR
    MODEL_SETTINGS

[testenv:dev]
description = Prepare local development tools
deps =
    pre-commit
    mypy
    types-PyYAML
    -r{toxinidir}/fmt-requirements.txt
    -r{toxinidir}/lint-requirements.txt
commands =
    pre-commit install -t commit-msg

[testenv:fmt]
description = Apply coding style standards to code
deps =
    -r{toxinidir}/fmt-requirements.txt
commands =
    isort {[vars]all_path}
    ruff format {[vars]all_path}

[testenv:lint]
description = Check code against coding style standards
deps =
    ; The tomli package is needed because https://github.com/codespell-project/codespell?tab=readme-ov-file#using-a-config-file
    tomli
    -r{toxinidir}/lint-requirements.txt
commands =
    codespell {toxinidir}/
    isort --check-only --diff {[vars]all_path}
    ruff check --show-fixes {[vars]all_path}

[testenv:unit]
description = Run unit tests
deps =
    -r{toxinidir}/unit-requirements.txt
commands =
    coverage run --source={[vars]src_path} \
        -m pytest --ignore={[vars]tests_path}/integration -vv --tb native -s {posargs}
    coverage report --data-file={toxinidir}/.coverage/.coverage
    coverage xml --data-file={toxinidir}/.coverage/.coverage

[testenv:integration]
description = Run integration tests
pass_env =
    CHARM_PATH
deps =
    -r{toxinidir}/integration-requirements.txt
commands =
    pytest -v \
           -s \
           --tb native \
           --log-cli-level=INFO \
           {posargs} \
           {[vars]tests_path}/integration
